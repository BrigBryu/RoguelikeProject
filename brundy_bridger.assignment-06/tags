!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	qualified	/Include an extra class-qualified tag entry for each tag/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	language	/Language of input file containing tag/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/bridgerbrundy/Documents/ClassCode/ISU327/rougeLikeProject/brundy_bridger.assignment-02/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	//
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
INT_MAX	gameObjects/dungeon.c	/^#define INT_MAX /;"	d	language:C	file:
MAX_HALL_TILES_THRESHOLD	gameObjects/dungeon.c	/^#define MAX_HALL_TILES_THRESHOLD /;"	d	language:C	file:
MAX_HORIZONTAL_IN_A_ROW	gameObjects/dungeon.c	/^#define MAX_HORIZONTAL_IN_A_ROW /;"	d	language:C	file:
SURRONDING_HALL_MAX	gameObjects/dungeon.c	/^#define SURRONDING_HALL_MAX /;"	d	language:C	file:
carveCorridor	gameObjects/dungeon.c	/^void carveCorridor(Dungeon* dungeon, Point* p1, Point* p2) {$/;"	f	language:C	typeref:typename:void
child	util/heap.c	/^  heap_node_t *child;$/;"	m	language:C	struct:heap_node	typeref:typename:heap_node_t *	file:
compare	util/heap.c	/^int32_t compare(const void *key, const void *with)$/;"	f	language:C	typeref:typename:int32_t
compare_dist_nodes	gameObjects/dungeon.c	/^int32_t compare_dist_nodes(const void *key, const void *with) {$/;"	f	language:C	typeref:typename:int32_t
createPoint	util/point.c	/^Point createPoint(int x, int y) {$/;"	f	language:C	typeref:typename:Point
createRectangle	util/rectangle.c	/^Rectangle createRectangle(int x, int y, int width, int height){$/;"	f	language:C	typeref:typename:Rectangle
createRectangleFromPoint	util/rectangle.c	/^Rectangle createRectangleFromPoint(Point* p, int width, int height){$/;"	f	language:C	typeref:typename:Rectangle
createTile	gameObjects/tile.c	/^Tile createTile(TileType type) {$/;"	f	language:C	typeref:typename:Tile
datum	util/heap.c	/^  void *datum;$/;"	m	language:C	struct:heap_node	typeref:typename:void *	file:
degree	util/heap.c	/^  uint32_t degree;$/;"	m	language:C	struct:heap_node	typeref:typename:uint32_t	file:
dist_node	gameObjects/dungeon.c	/^typedef struct dist_node {$/;"	s	language:C	file:
dist_node::distance	gameObjects/dungeon.c	/^  int distance;$/;"	m	language:C	struct:dist_node	typeref:typename:int	file:
dist_node::x	gameObjects/dungeon.c	/^  int x;$/;"	m	language:C	struct:dist_node	typeref:typename:int	file:
dist_node::y	gameObjects/dungeon.c	/^  int y;$/;"	m	language:C	struct:dist_node	typeref:typename:int	file:
dist_node_t	gameObjects/dungeon.c	/^} dist_node_t;$/;"	t	language:C	typeref:struct:dist_node	file:
distance	gameObjects/dungeon.c	/^  int distance;$/;"	m	language:C	struct:dist_node	typeref:typename:int	file:
dungeon_dijkstra_non_tunnel	gameObjects/dungeon.c	/^void dungeon_dijkstra_non_tunnel(Dungeon* dungeon) {$/;"	f	language:C	typeref:typename:void
generateDungeon	gameObjects/dungeon.c	/^Dungeon generateDungeon(){$/;"	f	language:C	typeref:typename:Dungeon
getCharacter	gameObjects/tile.c	/^char getCharacter(Tile* t){$/;"	f	language:C	typeref:typename:char
getDistance	util/point.c	/^double getDistance(Point* p1, Point* p2){$/;"	f	language:C	typeref:typename:double
getRectangleMid	util/rectangle.c	/^Point getRectangleMid(Rectangle* r){$/;"	f	language:C	typeref:typename:Point
heap_cascading_cut	util/heap.c	/^static void heap_cascading_cut(heap_t *h, heap_node_t *n)$/;"	f	language:C	typeref:typename:void	file:
heap_combine	util/heap.c	/^int heap_combine(heap_t *h, heap_t *h1, heap_t *h2)$/;"	f	language:C	typeref:typename:int
heap_consolidate	util/heap.c	/^static void heap_consolidate(heap_t *h)$/;"	f	language:C	typeref:typename:void	file:
heap_cut	util/heap.c	/^static void heap_cut(heap_t *h, heap_node_t *n, heap_node_t *p)$/;"	f	language:C	typeref:typename:void	file:
heap_decrease_key	util/heap.c	/^int heap_decrease_key(heap_t *h, heap_node_t *n, void *v)$/;"	f	language:C	typeref:typename:int
heap_decrease_key_no_replace	util/heap.c	/^int heap_decrease_key_no_replace(heap_t *h, heap_node_t *n)$/;"	f	language:C	typeref:typename:int
heap_delete	util/heap.c	/^void heap_delete(heap_t *h)$/;"	f	language:C	typeref:typename:void
heap_init	util/heap.c	/^void heap_init(heap_t *h,$/;"	f	language:C	typeref:typename:void
heap_insert	util/heap.c	/^heap_node_t *heap_insert(heap_t *h, void *v)$/;"	f	language:C	typeref:typename:heap_node_t *
heap_link	util/heap.c	/^static void heap_link(heap_t *h, heap_node_t *node, heap_node_t *root)$/;"	f	language:C	typeref:typename:void	file:
heap_node	util/heap.c	/^struct heap_node {$/;"	s	language:C	file:
heap_node::child	util/heap.c	/^  heap_node_t *child;$/;"	m	language:C	struct:heap_node	typeref:typename:heap_node_t *	file:
heap_node::datum	util/heap.c	/^  void *datum;$/;"	m	language:C	struct:heap_node	typeref:typename:void *	file:
heap_node::degree	util/heap.c	/^  uint32_t degree;$/;"	m	language:C	struct:heap_node	typeref:typename:uint32_t	file:
heap_node::mark	util/heap.c	/^  uint32_t mark;$/;"	m	language:C	struct:heap_node	typeref:typename:uint32_t	file:
heap_node::next	util/heap.c	/^  heap_node_t *next;$/;"	m	language:C	struct:heap_node	typeref:typename:heap_node_t *	file:
heap_node::parent	util/heap.c	/^  heap_node_t *parent;$/;"	m	language:C	struct:heap_node	typeref:typename:heap_node_t *	file:
heap_node::prev	util/heap.c	/^  heap_node_t *prev;$/;"	m	language:C	struct:heap_node	typeref:typename:heap_node_t *	file:
heap_node_delete	util/heap.c	/^void heap_node_delete(heap_t *h, heap_node_t *hn)$/;"	f	language:C	typeref:typename:void
heap_peek_min	util/heap.c	/^void *heap_peek_min(heap_t *h)$/;"	f	language:C	typeref:typename:void *
heap_remove_min	util/heap.c	/^void *heap_remove_min(heap_t *h)$/;"	f	language:C	typeref:typename:void *
height	gameObjects/dungeon.c	/^#define height /;"	d	language:C	file:
initDungeon	gameObjects/dungeon.c	/^void initDungeon(Dungeon* dungeon){$/;"	f	language:C	typeref:typename:void
insert_heap_node_in_list	util/heap.c	/^#define insert_heap_node_in_list(/;"	d	language:C	file:
main	gameScreen.c	/^int main(int argc, char *argv[]) {$/;"	f	language:C	typeref:typename:int
main	util/heap.c	/^int main(int argc, char *argv[])$/;"	f	language:C	typeref:typename:int
mark	util/heap.c	/^  uint32_t mark;$/;"	m	language:C	struct:heap_node	typeref:typename:uint32_t	file:
next	util/heap.c	/^  heap_node_t *next;$/;"	m	language:C	struct:heap_node	typeref:typename:heap_node_t *	file:
parent	util/heap.c	/^  heap_node_t *parent;$/;"	m	language:C	struct:heap_node	typeref:typename:heap_node_t *	file:
populateDungeon	gameObjects/dungeon.c	/^void populateDungeon(Dungeon* dungeon){$/;"	f	language:C	typeref:typename:void
postProcessDungeon	util/fileHandle.c	/^static void postProcessDungeon(Dungeon* d) {$/;"	f	language:C	typeref:typename:void	file:
prev	util/heap.c	/^  heap_node_t *prev;$/;"	m	language:C	struct:heap_node	typeref:typename:heap_node_t *	file:
printDebug	util/point.c	/^void printDebug(Point p){$/;"	f	language:C	typeref:typename:void
print_heap	util/heap.c	/^void print_heap(heap_t *h, char *(*print)(const void *v))$/;"	f	language:C	typeref:typename:void
print_heap_node	util/heap.c	/^void print_heap_node(heap_node_t *n, unsigned indent,$/;"	f	language:C	typeref:typename:void
print_heap_node_list	util/heap.c	/^void print_heap_node_list(heap_node_t *n)$/;"	f	language:C	typeref:typename:void
print_int	util/heap.c	/^char *print_int(const void *v)$/;"	f	language:C	typeref:typename:char *
readDungeon	util/fileHandle.c	/^void readDungeon(Dungeon *dungeon, char *testDungeon) {$/;"	f	language:C	typeref:typename:void
rectangleContainsCord	util/rectangle.c	/^int rectangleContainsCord(Rectangle* rec, int x, int y) {$/;"	f	language:C	typeref:typename:int
rectangleContainsPoint	util/rectangle.c	/^int rectangleContainsPoint(Rectangle* rec, Point* p){$/;"	f	language:C	typeref:typename:int
rectanglesOverlap	util/rectangle.c	/^int rectanglesOverlap(Rectangle* r1, Rectangle* r2) {$/;"	f	language:C	typeref:typename:int
rectanglesTouch	util/rectangle.c	/^int rectanglesTouch(Rectangle* r1, Rectangle* r2) {$/;"	f	language:C	typeref:typename:int
remove_heap_node_from_list	util/heap.c	/^#define remove_heap_node_from_list(/;"	d	language:C	file:
renderDungeon	gameObjects/dungeon.c	/^void renderDungeon(Dungeon* dungeon){$/;"	f	language:C	typeref:typename:void
renderTile	gameObjects/tile.c	/^void renderTile(Tile* t, int row, int col){$/;"	f	language:C	typeref:typename:void
runLoadAndSave	gameScreen.c	/^int runLoadAndSave(int argc, char *argv[]) {$/;"	f	language:C	typeref:typename:int
setHalls	gameObjects/dungeon.c	/^void setHalls(Dungeon* dungeon){$/;"	f	language:C	typeref:typename:void
setRooms	gameObjects/dungeon.c	/^void setRooms(Dungeon* dungeon){$/;"	f	language:C	typeref:typename:void
setTiles	gameObjects/dungeon.c	/^void setTiles(Dungeon* dungeon){$/;"	f	language:C	typeref:typename:void
splice_heap_node_lists	util/heap.c	/^#define splice_heap_node_lists(/;"	d	language:C	file:
swap	util/heap.c	/^#define swap(/;"	d	language:C	file:
validateDungeon	gameObjects/dungeon.c	/^int validateDungeon(Dungeon* dungeon) {$/;"	f	language:C	typeref:typename:int
width	gameObjects/dungeon.c	/^#define width /;"	d	language:C	file:
writeDungeon	util/fileHandle.c	/^void writeDungeon(Dungeon *dungeon){$/;"	f	language:C	typeref:typename:void
x	gameObjects/dungeon.c	/^  int x;$/;"	m	language:C	struct:dist_node	typeref:typename:int	file:
y	gameObjects/dungeon.c	/^  int y;$/;"	m	language:C	struct:dist_node	typeref:typename:int	file:
